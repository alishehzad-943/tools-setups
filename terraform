user create then acces key:
aws configure
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform
terraform -v
mkdir terraform
cd terraform
vim main.tf
     provider "aws" {
     region = "us-east-1"
     }

     resource "aws_instance" "one" {
     count = 3
     ami = "ami-000ec6c25978d5999"
     instance_type = "t2.micro"
     }
terraform init
terraform plan
terraform apply
terraform state list
terraform destroy -target = "aws_instance.one[0]"
terraform destroy -target="aws_instance.one[0]"
terraform destroy --auto-approve



#Terraform Lifecycle
vim main.tf

provider "aws"{
region = "us-east-1"
}

resource "aws_instance" "one"{
ami = "ami-000ec6c25978d5999"
instance_type = "t2.micro"
tags = {
Name = "Ali-server"
}

lifecycle {
prevent_destroy = true
}
}


Backend S3 bucket ,shift data of terrafrom t.state files to bucket
manually create first bucket

vim main.tf
provider "aws"{
region = "us-east-1"
}

terraform {
 backend "s3" {
 bucket = "rahamshaikdevops12"
 key    = "prod/terraform.tstate"
 region = "us-east-1"
 }
}
resource "aws_instance" "one"{
ami = "ami-000ec6c25978d5999"
instance_type = "t2.micro"
tags = {
Name = "Ali-server"
}
}

vim main.tf
 terraform init
  terraform apply --auto-approve
   terraform init -migrate-state
   terraform destroy --auto-approve

#terraform local provider
provider "aws" {
region = "us-east-1"
}
terraform {
  required_providers {
    local = {
      source = "hashicorp/local"
      version = "2.5.3"
    }
  }
}
terraform init -upgrade

#terraform aws provider
vim main.tf
provider "aws" {
region = "us-east-1"
}
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "6.0.0"
    }
  }
}
terraform init -upgrade

#Terraform Each Loop
vim main.tf
provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one"{
for_each = toset(["web server","app server","db server"])
ami = "ami-000ec6c25978d5999"
instance_type = "t2.micro"
tags = {
Name = "${each.key}"
}

vim main.tf
provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one"{
count = length(var.instance_type)
ami = "ami-000ec6c25978d5999"
instance_type = var.instance_type[count.index]
tags = {
Name = var.instance_name[count.index]
}
}

variable "instance_type"{
default = ["t2.micro", "t2.medium" , "t2.nano"]
}

variable "instance_name"{
default = ["web","app", "db"]
}


#Terraform down block
vim main.tf

provider "aws" {
  region = "us-east-1"
}

variable "instance_names" {
  default = ["web", "app", "db"]
}

variable "instance_type" {
  default = "t2.micro"
}

resource "aws_instance" "example" {
  for_each = toset(var.instance_names)

  ami           = "ami-000ec6c25978d5999"
  instance_type = var.instance_type

  tags = {
    Name = each.key
    Role = "Terraform-Demo"
  }

  lifecycle {
    create_before_destroy = true
  }

  provisioner "local-exec" {
    command = "echo Instance ${each.key} created!"
  }
}











































